<?php

class QuickSort
{
    public function sort(&$arr)
    {
        $this->implementSort($arr, 0, count($arr) - 1, 0);
    }

    public function implementSort(&$arr, $l, $r, $depth)
    {
        $depthStr = $this->generateDepthString($depth);
        if ($l >= $r) {
            return ;
        }
        echo $depthStr;
        $arrstr = implode(", ", $arr);
        echo sprintf("quick sort, arr: [%s], l: %d, r :%d", $arrstr, $l, $r).PHP_EOL;
        // $p = $this->partition($arr, $l, $r);
        $p = $this->partition2($arr, $l, $r); //双路快排
        echo $depthStr;
        $arrstr = implode(", ", $arr);
        echo sprintf("after partition, arr: [%s], p:%d", $arrstr, $p).PHP_EOL;

        $this->implementSort($arr, $l, $p - 1, $depth + 1);
        $this->implementSort($arr, $p + 1, $r, $depth + 1);
        echo $depthStr;
        $arrstr = implode(", ", $arr);
        echo sprintf("after quicksort, arr: [%s], l: %d, r :%d", $arrstr, $l, $r).PHP_EOL;
    }

    protected function partition(&$arr, $l, $r)
    {
        // 原地分割
        // arr[l+1,...,j] <= v; arr[j+1,...,i-1] > v

        // 如果使用快速排序对有序数进行排序，就会出现性能退化的情况。
        // 在区间 l 到 r 之间随便取一个元素，与 arr[l] 进行交换。
        $p = mt_rand($l, $r);
        $this->swap($arr, $l, $p);
        // $p = floor(($l + $r)/2);
        // $this->swap($arr, $l, $p);
        $j = $l;
        for ($i = $l + 1; $i <= $r; $i ++) {
            if ($arr[$i] <= $arr[$l]) {
                $j++;
                $temp = $arr[$j];
                $arr[$j] = $arr[$i];
                $arr[$i] = $temp;
            }
        }
        $temp1 = $arr[$l];
        $arr[$l] = $arr[$j];
        $arr[$j] = $temp1;
        return $j;
    }

    public function partition2(&$arr, $l, $r)
    {
        //在区间[l, r]中取一个数k，交换arr[l]和arr[k]
        $k = mt_rand($l, $r);
        $this->swap($arr, $l, $k);
        $i = $l + 1;
        $j = $r;
        while (true) {
            while ($i <= $j && $arr[$i] < $arr[$l]) {
                $i ++;
            }
            while ($j >= $i && $arr[$j] > $arr[$l]) {
                $j --;
            }
            if ($i >= $j) {
                break;
            }
            $this->swap($arr, $i, $j);
            $i ++;
            $j --;
        }
        $this->swap($arr, $l, $j);
        return $j;
    }

    public function partition3(&$arr, $l, $r)
    {
        if ($l >= $r) {
            return;
        }
        // 三路快排
        // 随机化
        $k = mt_rand($l, $r);
        $this->swap($arr, $l, $k);
        // 定义循环不变量 arr[l,...,lt - 1] < v; arr[lt,...,gt - 1] = v; arr[gt,...,r] > v
        // 定义 lt、gt、i
        // lt 最后一个小于 v 的元素所在的位置；
        // gt 第一个大于 v 的元素所在的位置。
        $lt = $l;
        $gt = $r + 1;
        $i = $l + 1;
        $v = $arr[$l];
        while ($i < $gt) {
            if ($arr[$i] < $v) {
                $lt ++;
                $this->swap($arr, $i, $lt);
                $i++;
            } elseif ($arr[$i] > $v) {
                $gt --;
                $this->swap($arr, $i, $gt);
            } else {
                $i ++;
            }
        }
        $this->swap($arr, $l, $lt);
        $this->partition3($arr, $l, $lt);
        $this->partition3($arr, $gt, $r);
    }

    protected function generateDepthString($depth)
    {
        $str = '';
        for ($i = 0; $i < $depth; $i++) {
            $str .= '|--';
        }
        return $str;
    }

    protected function swap(&$arr, $i, $j)
    {
        $temp = $arr[$i];
        $arr[$i] = $arr[$j];
        $arr[$j] = $temp;
    }

    public function generateSpecialArr($n = 10)
    {
        $arr = array_fill(0, $n, 0);
        $this->generate($arr, 0, count($arr)-1, 0, 0);
        // var_dump($arr);
    }

    protected function generate(&$arr, $l, $r, $value, $depth)
    {
        if ($l > $r) {
            return;
        }
        $depthStr = $this->generateDepthString($depth);
        echo $depthStr;
        $arrstr = implode(', ', $arr);
        echo sprintf("generate: arr[%s], l: %d, r: %d, value: %d", $arrstr, $l, $r, $value).PHP_EOL;

        $mid = floor(($l + $r) / 2);
        $arr[$mid] = $value;
        $this->swap($arr, $l, $mid);

        $depthStr = $this->generateDepthString($depth);
        echo $depthStr;
        $arrstr = implode(', ', $arr);
        echo sprintf("first swap: arr[%s], mid: %d, swamp arr[%s] and arr[%s]", $arrstr, $mid, $l, $mid).PHP_EOL;

        $this->generate($arr, $l + 1, $r, $value + 1, $depth + 1);

        $depthStr = $this->generateDepthString($depth);
        echo $depthStr;
        $arrstr = implode(', ', $arr);
        echo sprintf("after generate: arr[%s]", $arrstr).PHP_EOL;

        $this->swap($arr, $l, $mid);

        $depthStr = $this->generateDepthString($depth);
        echo $depthStr;
        $arrstr = implode(', ', $arr);
        echo sprintf("second swap: arr[%s], mid: %d, swamp arr[%s] and arr[%s]", $arrstr, $mid, $l, $mid).PHP_EOL;
    }
}

// $arr = [2,0,2,1,1,0];
$arr = [-53284,-57397,-58316,-65348,-55531,-62041,-57199,-51035,-62397,-48555,-55950,-57022,-51288,-45678,-6965,3,-563,3,-3743,-6293,2,-9835,-46,-2,-15551,-867,-28331,-655,-9685,-1515,-136,-762,-13386,-38,-1669,-2,-2,-35533,-856,-48,-25,-108,-47,-69,-30,-9,-1,-38186,-37,-2,-41119,-988,-5064,-513,-4749,-37224,-370,0,-46,-41051,-308,-6653,-962,-12,-6105,-72,-8,-4,-408,-45621,-2,-68,-8419,-9,-4522,0,-4,-78,-319,-7,-38,0,-22987,-98,1,-374,-789,-15,-7528,-553,-92,-934,-2464,-522,-455,-7169,-1,-392,-826,-43,-912,-24,2,-7,0,-8,-55,-5,-7374,-3,-32904,-8140,-791,-460,-9,-5,-14072,-4819,-22,-56,-92,-9014,-2,5,-37,-9358,-6537,-8734,-81,-77,0,-298,-9877,-670,-6,-19,5,-1923,3,-38777,-10657,-1838,-6,-8713,-8,-279,-2,-9,-82,-696,-6,-29120,-73,-1,-84,-501,4,-497,4,-1,-8414,-34,1,-48,-4,-2845,-78,-55,-62,-7035,0,-4,0,-29988,-2298,-6,-1576,-992,-216,-52,1,-5,-71,-62,-91,-154,0,3,-6685,-1,4,-4041,3,-6731,-7980,-37,-957,-864,-7,-3,-14,0,-7,-6,-2,0,-686,-6620,-5519,-14917,-88,-891,1,-39,-38789,-808,-23608,-3703,-93,-5589,-927,-942,-3185,-633,-62,-614,-5899,-47,-252,-8240,3,-916,-152,4,-40380,-11,-89,-7948,-86,-119,-2,-9297,0,0,-7,-5716,-3,-84,-110,-915,-40,-6,-2407,-133,-2,-8122,4,-3876,-4121,-42982,-6,4,-50,-2,-9,-35,-8,-2,-6,-3,-9,-14850,-296,-5053,-6,-470,-42,-2,-3,-92,-30,-24361,-9,-662,-2,-5937,-42503,-386,-3501,-7,4,-4410,-141,-23812,-42466,-7940,3,-65,-864,-53,-38141,1,-98,-24442,-41276,-430,-58,-7114,-3,-25,0,-66,4,-8022,-37396,-8557,-87,-60,-94,-640,2,6,6,6,6,6,6,6,6,6,6,6,27,13,27,21,19,19,18,22,9,47,9,8,32,50,25,29,8,48,8,21,10,11,9,11,7,15,9,7,49,33,37,39,7,8,7,9,7,43,30,26,46,45,9,42,51,51,54,60,62,68,73,55,53,70,55,59,69,54,67,61,61,59,54,74,78,83,80,87,88];
// $arr = array_fill(0, 10, 0);
// var_dump($arr);exit;
// $arr = [1, 3, 0, 2, 4];
$q = new QuickSort();
$q->partition3($arr, 0, count($arr) - 1);
var_dump($arr);
echo '<hr/>';
$re = [-63928,-63026,-61786,-61350,-60387,-60148,-59906,-56117,-55995,-54954,-54586,-52343,-49280,-49204,-47147,-47128,-46403,-43021,-42642,-40230,-38639,-38134,-37286,-36164,-34109,-33528,-32416,-29395,-29170,-29078,-28141,-26467,-26346,-25968,-24927,-24286,-21034,-20295,-20242,-18833,-17781,-17188,-16396,-16009,-15887,-15810,-14313,-12753,-10616,-10187,-9869,-9349,-9310,-9009,-8989,-8794,-8741,-8663,-8620,-8490,-8453,-8403,-7621,-7496,-7123,-7099,-6978,-6823,-6763,-6738,-6716,-6647,-6645,-6631,-6509,-6414,-6273,-6215,-6212,-6203,-5958,-5947,-5927,-5615,-5549,-5525,-5406,-4644,-4399,-4165,-3849,-3821,-3809,-3573,-3546,-3434,-3392,-3216,-2905,-2520,-2468,-2223,-2212,-2040,-1914,-1378,-1282,-1136,-1094,-997,-994,-943,-929,-921,-882,-881,-827,-820,-812,-803,-796,-788,-746,-742,-740,-699,-690,-686,-655,-649,-646,-599,-598,-581,-574,-562,-546,-541,-534,-530,-519,-460,-459,-455,-430,-430,-429,-394,-385,-382,-363,-343,-340,-320,-308,-286,-274,-271,-266,-264,-229,-176,-173,-162,-161,-156,-150,-143,-136,-117,-117,-106,-99,-98,-98,-97,-97,-97,-90,-88,-88,-86,-85,-84,-84,-82,-80,-79,-79,-79,-77,-76,-75,-72,-71,-69,-64,-64,-63,-63,-62,-61,-60,-59,-57,-55,-54,-53,-53,-52,-51,-45,-41,-40,-38,-38,-37,-36,-36,-36,-35,-34,-32,-30,-30,-30,-27,-26,-24,-24,-23,-22,-21,-20,-19,-18,-16,-14,-13,-9,-9,-9,-8,-8,-8,-8,-7,-7,-7,-6,-6,-5,-5,-5,-5,-5,-5,-5,-4,-4,-4,-4,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,12,13,14,14,15,16,17,19,20,21,22,24,26,26,28,30,30,32,32,34,34,36,36,37,38,40,40,42,42,48,50,50,50,51,51,51,51,53,53,55,55];
var_dump($re);
// $q->sort($arr);
exit;
// var_dump($arr);
$q->generateSpecialArr(5);
